
networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  sqlserver-data:
    driver: local

services:
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./config/otel-collector-config.yml:/etc/otel-collector-config.yml

    ports:
      - "8888:8888" # OTLP
      - "8889:8889" # Prometheus
      - "13133:13133" # Health Check
      - "4317:4317" # Jaeger
    networks:
      - monitoring
    depends_on:
      - jaeger
      - prometheus
      - loki
    restart: unless-stopped

  jaeger:

    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686" # Jaeger Web UI

    restart: unless-stopped
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - monitoring
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/grafana-datasources.yml
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    networks:
      - monitoring
  # Add Loki
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
#    volumes:
#      - ./config/loki/local-config.yaml:/etc/loki/local-config.yaml
    networks:
      - monitoring

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command: '--path.rootfs=/host' # This is why you need to run as root ,have access to root you are monitoring the sytem and not the container
    pid: host
    restart: unless-stopped
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    #  - /:/rootfs:ro,rslave  # I added ,rslave to this line to fix the error :now includes the rslave propagation mode to comply with the requirement when the mount source is within the Docker daemon root.


#SQlserver    
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    #image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Your_password123
      - MSSQL_PID=Express
      - MSSQL_MEMORY_LIMIT_MB=1024
    ports:
      - "1439:1433"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "sqlcmd", "-S", "localhost", "-U", "sa", "-P", "Your_password123", "-Q", "select 1"]
      interval: 10s
      timeout: 5s
    volumes:
      - sqlserver-data:/var/opt/mssql